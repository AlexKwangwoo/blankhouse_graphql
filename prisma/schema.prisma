// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  username          String       @unique
  password          String
  bio               String?
  avatar            String?
  balance           Int
  address           String?
  emergency_contact String?
  phone_number      String?
  is_host           Boolean
  born_year         String?
  school            String?
  work              String?
  hobby             String?
  gender            String?
  language          String?
  currency          String?
  rooms             Room[]
  experiences       Experience[]
  reviews           Review[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  // Message   Message[]
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  kind        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  rooms       Room[]
  experiences Experience[]
}

model Room {
  id               Int       @id @default(autoincrement())
  name             String
  country          String
  city             String
  price            Int
  cleaning_fee     Int
  number_of_room   Int
  number_of_toilet Int
  number_of_bed    Int
  maximum_guests   Int
  description      String?
  address          String
  pet_friendly     Boolean
  house_type       String
  things_to_know   String?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  reviews          Review[]
  // 테스트겸 category가 지워져도 방은 남게 했고 유저 지워지면 같이 삭제되게함!
  category         Category? @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Experience {
  id             Int       @id @default(autoincrement())
  country        String
  city           String
  name           String
  price          Int
  address        String
  start          DateTime  @db.Time(2)
  end            DateTime  @db.Time(2)
  description    String?
  things_to_know String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  reviews        Review[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  perk           Perk[]
  perkId         Int?
}

model Perk {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  details     String
  explanation String?
  experience  Experience[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Review {
  id                   Int         @id @default(autoincrement())
  user                 User?       @relation(fields: [userId], references: [id])
  userId               Int?
  experience           Experience? @relation(fields: [experienceId], references: [id])
  experienceId         Int?
  room                 Room?       @relation(fields: [roomId], references: [id])
  roomId               Int?
  payload              String
  rating               Int         @default(0)
  cleanliness_rating   Int         @default(0)
  communication_rating Int         @default(0)
  location_rating      Int         @default(0)
  accuracy_rating      Int         @default(0)
  check_in_rating      Int         @default(0)
  experience_rating    Int         @default(0)
}
